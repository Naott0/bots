import json
import dotenv
import os
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

dotenv.load_dotenv()
TOK = os.getenv("API_TOKEN")
# –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
API_TOKEN: str = TOK
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher(bot)




# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard2: ReplyKeyboardMarkup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
button_1: KeyboardButton = KeyboardButton('–ú–æ—Å–∫–≤–∞')
button_2: KeyboardButton = KeyboardButton('–ú–∞—Ö–∞—á–∫–∞–ª–∞')
button_3: KeyboardButton = KeyboardButton('–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É ')
button_5: KeyboardButton = KeyboardButton('A–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å')
button_6: KeyboardButton = KeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç')
button_7: KeyboardButton = KeyboardButton('–§–∞–∫—Ç—ã –æ –∫–æ—à–∫–∞—Ö [EN]')
button_8: KeyboardButton = KeyboardButton('–£–∑–Ω–∞—Ç—å IP –∞–¥—Ä–µ—Å')
button_9: KeyboardButton = KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ Nasa [EN]')
button_10: KeyboardButton = KeyboardButton('Random dog')
button_11: KeyboardButton = KeyboardButton('–°–æ—á–∏')
button_12: KeyboardButton = KeyboardButton('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π 18+')
button_13: KeyboardButton = KeyboardButton('–í–µ–± –∫–∞–º–µ—Ä—ã –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')
# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–æ–º add
keyboard.add(button_1, button_2, button_11, button_3)
keyboard2.add(button_5, button_6, button_7, button_9, button_10, button_12,button_13)




# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
async def process_start_command(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É !!!üëá', reply_markup=keyboard2)


async def process_dog_command(message: types.Message):
    url = "https://dog.ceo/api/breeds/image/random"
    response = requests.get(url)
    ui = json.loads(response.text)
    gav = (ui.get('message'))
    await message.answer(f'{gav}')


async def process_nassa_command(message: types.Message):
    url = "https://api.nasa.gov/planetary/apod?api_key=i7Zw44df1S9mgDvGc7ybK2OZMQGti2MniO4SnIM3"
    response = requests.request("GET", url)
    nassa = json.loads(response.text)
    text1 = (nassa.get('explanation'))
    url2 = (nassa.get('url'))
    await message.answer(f'{text1} {url2} ')


async def process_ip_command(message: types.Message):
    url = "http://ipwho.is/"
    response = requests.request("GET", url)
    a = json.loads(response.text)
    country = (a.get('country'))
    countryCode = (a.get('country_code'))
    regionName = (a.get('region'))
    city = (a.get('city'))
    zip = (a.get('postal'))
    lat = (a.get('latitude'))
    lon = (a.get('longitude'))
    ip = (a.get('ip'))
    con = "–°—Ç—Ä–∞–Ω–∞:"
    reg = "–†–µ–≥–∏–æ–Ω:"
    cit = "–ì–æ—Ä–æ–¥:"
    zi = "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:"
    la = "–®–∏—Ä–æ—Ç–∞:"
    ln = "–î–æ–ª–≥–æ—Ç–∞: "
    en = "–Ø–∑—ã–∫: "
    ip2 = "–í–∞—à ip –∞–¥—Ä–µ—Å:"
    await message.answer(
        f' {ip2}  {ip} \n {con} {country} \n {en} {countryCode} \n {reg} {regionName} \n {cit} {city} \n {zi} {zip} \n {la} {lat} \n {ln}{lon} \n ')


async def process_pogoda_command(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥! ', reply_markup=keyboard)


async def process_cat_command(message: types.Message):
    url = "https://catfact.ninja/fact"
    response = requests.request("GET", url)
    a = json.loads(response.text)
    temp = (a.get('fact'))
    await message.answer(f'{temp}')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard5: InlineKeyboardMarkup = InlineKeyboardMarkup()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
url_button_1: InlineKeyboardButton = InlineKeyboardButton(
                                        text='C—Ç–∞–¥–∏–æ–Ω, –ª–µ–≤—ã–π –±–µ—Ä–µ–≥"',
                                        url='https://webcams.windy.com/webcams/stream/1481608492?lookr.com:98556ab992b25aa05817ba65ce8c7bce:1673268752')
url_button_2: InlineKeyboardButton = InlineKeyboardButton(
                                        text='–°–æ–±–æ—Ä–Ω—ã–π',
                                        url='https://webcams.windy.com/webcams/stream/1638727136')
url_button_3: InlineKeyboardButton = InlineKeyboardButton(
                                        text='–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç',
                                        url='https://webcams.windy.com/webcams/stream/1658941999')
url_button_4: InlineKeyboardButton = InlineKeyboardButton(
                                        text='–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è',
                                        url='https://webcams.windy.com/webcams/stream/1614560597')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–æ–º add
keyboard5.add(url_button_1).add(url_button_2).add(url_button_3).add(url_button_4)


async def process_cam_command(message: types.Message):
    await message.answer(
        text='–í–µ–± –∫–∞–º–µ—Ä—ã online ',
        reply_markup=keyboard5)


async def process_mat_command(message: types.Message):
    url = "https://evilinsult.com/generate_insult.php?lang=ru&type=json"
    response = requests.get(url)
    a = json.loads(response.text)
    mat = (a.get('insult'))
    await message.answer(f'{mat}')


async def process_pnd_command(message: types.Message):
    url = "https://api.weather.yandex.ru/v2/fact?lat=47.222078&lon=39.720349&extra=true"
    headers = {'X-Yandex-API-Key': "c44361a5-54fe-400d-a65d-782c8fc66dcd"}
    response = requests.request("GET", url, headers=headers)
    a = json.loads(response.text)
    temp = (a.get('temp'))
    z = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    current_datetime = datetime.now()
    rt = "C–µ–π—á–∞—Å –≤ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É !"
    feels_like = (a.get('feels_like'))
    b = "–û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    condition = (a.get('condition'))
    c = "H–µ–±–æ:"
    ii = {'clear': '‚òÄÔ∏è', 'partly-cloudy': 'üå§Ô∏è', 'cloudy': 'üå•Ô∏è', 'overcast': '‚òÅÔ∏è', 'drizzle': 'üíß', ' light-rain': '‚òîÔ∏è',
          'rain': 'üåßÔ∏è', 'moderate-rain': 'üåßÔ∏èüåß', ' heavy-rain ': 'üíßüíßüíß', 'showers': 'üí¶',
          'continuous-heavy-rain': 'üåßÔ∏èüå¨', 'wet-snow': 'üåßÔ∏è‚ùÑÔ∏è', 'light-snow': 'üå®Ô∏è', 'snow': '‚ùÑÔ∏è',
          'snow-showers': '‚ùÑÔ∏è‚ùÑÔ∏èÔ∏è‚ùÑÔ∏è', 'hail': 'üßä',
          'thunderstorm': '‚ö°Ô∏è', 'thunderstorm-with-rain': '‚õàÔ∏è', 'thunderstorm-with-hail': '‚ö°Ô∏èüßä'}
    condition = (ii.get(condition))
    wind_speed = (a.get('wind_speed'))
    v = "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–≤ –º/—Å):"
    pressure_mm = (a.get('pressure_mm'))
    d = "–î–∞–≤–ª–µ–Ω–∏–µ (–≤ –º–º —Ä—Ç. —Å—Ç.).:"
    humidity = (a.get('humidity'))
    h = "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ %:"
    vet = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:"
    wind_dir = (a.get('wind_dir'))

    vet2 = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': ' —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
            'se': ' —é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': ' —é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', 'c': '—à—Ç–∏–ª—å'}
    wind_dir3 = (vet2.get(wind_dir))

    await message.answer(
        f'{rt} \n {current_datetime} \n {z} {temp} \n {b} {feels_like} \n {c} {condition} \n {vet} {wind_dir3} \n {v} {wind_speed} \n {d} {pressure_mm} \n {h} {humidity}')




async def process_moscow_command(message: types.Message):
    url = "https://api.weather.yandex.ru/v2/fact?lat=55.81579208&lon=37.38003159&extra=true"
    headers = {'X-Yandex-API-Key': "c44361a5-54fe-400d-a65d-782c8fc66dcd"}
    response = requests.request("GET", url, headers=headers)
    a = json.loads(response.text)
    temp = (a.get('temp'))
    z = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    current_datetime = datetime.now()
    rt = "C–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ  !"
    feels_like = (a.get('feels_like'))
    b = "–û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    condition = (a.get('condition'))
    c = "H–µ–±–æ:"
    ii = {'clear': '‚òÄÔ∏è', 'partly-cloudy': 'üå§Ô∏è', 'cloudy': 'üå•Ô∏è', 'overcast': '‚òÅÔ∏è', 'drizzle': 'üíß', ' light-rain': '‚òîÔ∏è',
          'rain': 'üåßÔ∏è', 'moderate-rain': 'üåßÔ∏èüåß', ' heavy-rain ': 'üíßüíßüíß', 'showers': 'üí¶',
          'continuous-heavy-rain': 'üåßÔ∏èüå¨', 'wet-snow': 'üåßÔ∏è‚ùÑÔ∏è', 'light-snow': 'üå®Ô∏è', 'snow': '‚ùÑÔ∏è',
          'snow-showers': '‚ùÑÔ∏è‚ùÑÔ∏èÔ∏è‚ùÑÔ∏è', 'hail': 'üßä',
          'thunderstorm': '‚ö°Ô∏è', 'thunderstorm-with-rain': '‚õàÔ∏è', 'thunderstorm-with-hail': '‚ö°Ô∏èüßä'}
    condition = (ii.get(condition))
    wind_speed = (a.get('wind_speed'))
    v = "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–≤ –º/—Å):"
    pressure_mm = (a.get('pressure_mm'))
    d = "–î–∞–≤–ª–µ–Ω–∏–µ (–≤ –º–º —Ä—Ç. —Å—Ç.).:"
    humidity = (a.get('humidity'))
    h = "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ %:"
    vet = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:"
    wind_dir = (a.get('wind_dir'))

    vet2 = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': ' —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
            'se': ' —é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': ' —é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', 'c': '—à—Ç–∏–ª—å'}
    wind_dir3 = (vet2.get(wind_dir))

    await message.answer(
        f'{rt} \n {current_datetime} \n {z} {temp} \n {b} {feels_like} \n {c} {condition} \n {vet} {wind_dir3} \n {v} {wind_speed} \n {d} {pressure_mm} \n {h} {humidity}')


async def process_sochi_command(message: types.Message):
    url = "https://api.weather.yandex.ru/v2/fact?lat=43.58547592&lon=39.72309494&extra=true"
    headers = {'X-Yandex-API-Key': "c44361a5-54fe-400d-a65d-782c8fc66dcd"}
    response = requests.request("GET", url, headers=headers)
    a = json.loads(response.text)
    temp = (a.get('temp'))
    z = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    current_datetime = datetime.now()
    rt = "C–µ–π—á–∞—Å –≤ –°–æ—á–∏  !"
    feels_like = (a.get('feels_like'))
    b = "–û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    condition = (a.get('condition'))
    c = "H–µ–±–æ:"
    ii = {'clear': '‚òÄÔ∏è', 'partly-cloudy': 'üå§Ô∏è', 'cloudy': 'üå•Ô∏è', 'overcast': '‚òÅÔ∏è', 'drizzle': 'üíß', ' light-rain': '‚òîÔ∏è',
          'rain': 'üåßÔ∏è', 'moderate-rain': 'üåßÔ∏èüåß', ' heavy-rain ': 'üíßüíßüíß', 'showers': 'üí¶',
          'continuous-heavy-rain': 'üåßÔ∏èüå¨', 'wet-snow': 'üåßÔ∏è‚ùÑÔ∏è', 'light-snow': 'üå®Ô∏è', 'snow': '‚ùÑÔ∏è',
          'snow-showers': '‚ùÑÔ∏è‚ùÑÔ∏èÔ∏è‚ùÑÔ∏è', 'hail': 'üßä',
          'thunderstorm': '‚ö°Ô∏è', 'thunderstorm-with-rain': '‚õàÔ∏è', 'thunderstorm-with-hail': '‚ö°Ô∏èüßä'}
    condition = (ii.get(condition))
    wind_speed = (a.get('wind_speed'))
    v = "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–≤ –º/—Å):"
    pressure_mm = (a.get('pressure_mm'))
    d = "–î–∞–≤–ª–µ–Ω–∏–µ (–≤ –º–º —Ä—Ç. —Å—Ç.).:"
    humidity = (a.get('humidity'))
    h = "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ %:"
    vet = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:"
    wind_dir = (a.get('wind_dir'))

    vet2 = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': ' —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
            'se': ' —é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': ' —é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', 'c': '—à—Ç–∏–ª—å'}
    wind_dir3 = (vet2.get(wind_dir))

    await message.answer(
        f'{rt} \n {current_datetime} \n {z} {temp} \n {b} {feels_like} \n {c} {condition} \n {vet} {wind_dir3} \n {v} {wind_speed} \n {d} {pressure_mm} \n {h} {humidity}')


async def process_makala_command(message: types.Message):
    url = "https://api.weather.yandex.ru/v2/fact?lat=42.98310089&lon=47.5047493&extra=true"
    headers = {'X-Yandex-API-Key': "c44361a5-54fe-400d-a65d-782c8fc66dcd"}
    response = requests.request("GET", url, headers=headers)
    a = json.loads(response.text)
    temp = (a.get('temp'))
    z = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    current_datetime = datetime.now()
    rt = "C–µ–π—á–∞—Å –≤ –ú–∞—Ö–∞—á–∫–∞–ª–µ  !"
    feels_like = (a.get('feels_like'))
    b = "–û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"
    condition = (a.get('condition'))
    c = "H–µ–±–æ:"
    ii = {'clear': '‚òÄÔ∏è', 'partly-cloudy': 'üå§Ô∏è', 'cloudy': 'üå•Ô∏è', 'overcast': '‚òÅÔ∏è', 'drizzle': 'üíß', ' light-rain': '‚òîÔ∏è',
          'rain': 'üåßÔ∏è', 'moderate-rain': 'üåßÔ∏èüåß', ' heavy-rain ': 'üíßüíßüíß', 'showers': 'üí¶',
          'continuous-heavy-rain': 'üåßÔ∏èüå¨', 'wet-snow': 'üåßÔ∏è‚ùÑÔ∏è', 'light-snow': 'üå®Ô∏è', 'snow': '‚ùÑÔ∏è',
          'snow-showers': '‚ùÑÔ∏è‚ùÑÔ∏èÔ∏è‚ùÑÔ∏è', 'hail': 'üßä',
          'thunderstorm': '‚ö°Ô∏è', 'thunderstorm-with-rain': '‚õàÔ∏è', 'thunderstorm-with-hail': '‚ö°Ô∏èüßä'}
    condition = (ii.get(condition))
    wind_speed = (a.get('wind_speed'))
    v = "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–≤ –º/—Å):"
    pressure_mm = (a.get('pressure_mm'))
    d = "–î–∞–≤–ª–µ–Ω–∏–µ (–≤ –º–º —Ä—Ç. —Å—Ç.).:"
    humidity = (a.get('humidity'))
    h = "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ %:"
    vet = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:"
    wind_dir = (a.get('wind_dir'))

    vet2 = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': ' —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
            'se': ' —é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': ' —é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', 'c': '—à—Ç–∏–ª—å'}
    wind_dir3 = (vet2.get(wind_dir))

    await message.answer(
        f'{rt} \n {current_datetime} \n {z} {temp} \n {b} {feels_like} \n {c} {condition} \n {vet} {wind_dir3} \n {v} {wind_speed} \n {d} {pressure_mm} \n {h} {humidity}')


async def process_rub_command(message: types.Message):
    url = "https://api.apilayer.com/fixer/latest?symbols=RUB&base=USD"

    payload = {}
    headers = {
        "apikey": "aR3ra49CC7kwxyJXU3tQRJglPqL8eRLO"
    }

    response = requests.request("GET", url, headers=headers, data=payload)
    rub = (response.text[127:139])
    t = "USD"
    iu = "–ö—É—Ä—Å –≤–∞–ª—é—Ç"

    url = "https://api.apilayer.com/fixer/latest?symbols=RUB&base=EUR"

    payload = {}
    headers = {
        "apikey": "aR3ra49CC7kwxyJXU3tQRJglPqL8eRLO"
    }

    response = requests.request("GET", url, headers=headers, data=payload)
    eur = (response.text[127:139])
    eur1 = "EUR"
    url = "https://api.apilayer.com/fixer/latest?symbols=RUB&base=CNY"

    payload = {}
    headers = {
        "apikey": "aR3ra49CC7kwxyJXU3tQRJglPqL8eRLO"
    }

    response = requests.request("GET", url, headers=headers, data=payload)
    CNY = (response.text[127:139])
    CNY1 = "CNY"
    info = "Fixer.io - –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö 170 –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.  –î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö Fixer, –ø–æ—Å—Ç—É–ø–∞—é—Ç –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–Ω–∫–æ–≤, –≤–∫–ª—é—á–∞—è –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫."
    await message.answer(f'{iu}\n  {t}:{rub}{eur1}:{eur}{CNY1}:{CNY}\n{info}')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
async def send_echo(message: types.Message):
    await message.reply("B—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é \n–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ / start")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.register_message_handler(process_start_command, commands='start')
dp.register_message_handler(process_pogoda_command, text='A–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å')
dp.register_message_handler(process_pnd_command, text='–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')
dp.register_message_handler(process_sochi_command, text='–°–æ—á–∏')
dp.register_message_handler(process_moscow_command, text='–ú–æ—Å–∫–≤–∞')
dp.register_message_handler(process_makala_command, text='–ú–∞—Ö–∞—á–∫–∞–ª–∞')
dp.register_message_handler(process_rub_command, text='–ö—É—Ä—Å –≤–∞–ª—é—Ç')
dp.register_message_handler(process_cat_command, text='–§–∞–∫—Ç—ã –æ –∫–æ—à–∫–∞—Ö [EN]')
dp.register_message_handler(process_ip_command, text='–£–∑–Ω–∞—Ç—å IP –∞–¥—Ä–µ—Å')
dp.register_message_handler(process_nassa_command, text='–ù–æ–≤–æ—Å—Ç–∏ Nasa [EN]')
dp.register_message_handler(process_dog_command, text='Random dog')
dp.register_message_handler(process_mat_command, text='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π 18+')
dp.register_message_handler(process_cam_command, text='–í–µ–± –∫–∞–º–µ—Ä—ã –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')
dp.register_message_handler(send_echo)
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
